Prefix Sum:
What is prefix-sum? 
Given an array of size n, the prefix sum is another array (say prefixSum) of the same size such that for each index 0 <= i < n, prefixSum[i] = a[0] + a[1] .... + a[i].

How to calculate the prefix-sum?
prefixSum[2] = a[0] + a[1] + a[2] 
prefixSum[3] = a[0] + a[1] + a[2] + a[3] = prefixSum[2] + a[3]
Therefore, for all indexes i > 0, prefixSum[i] = prefixSum[i-1] + a[i]

prefixSum[0] = a[0]
for i → 1 to (array.length - 1) {
    prefixSum[i] = prefixSum[i-1] + a[i]
}

Time Complexity = O(N)
Space Complexity = O(N) [prefixSum array]



Where to use prefix-sum?
Prefix sum is used to solve problems where we have to find the sum of elements in the given range from index L to R for multiple queries. 

For example: 
Index →       0,  1, 2, 3,  4, 5, 6
             A = [3, -2, 8, -5, 4, 0, 1]
prefixSum = [3, 1, 9,  4, 8, 8,  9]
 
Find the sum of elements from index 2 to 5.
Answer = A[2] + A[3] + A[4] + A[5] = 8 - 5 + 4 + 0 = 7

Better approach,
Answer = (A[0] + A[1] + A[2] + A[3] + A[4] + A[5]) - (A[0] + A[1]) 
             = prefixSum[5] - prefixSum[1] = 8 - 1 = 7

Therefore, sum of elements in the given range of index L to R =
prefixSum[R] - prefixSum[L - 1]	, if L > 0
prefixSum[R]				, if L == 0

BONUS: The same idea of prefix-sum can also be used to calculate prefix-xor, which can be used to find the xor of values in the index range L to R. [ Try it ]

Why to use prefix-sum?
Calculating sum of elements from index L to R by traveling will take the time complexity as linear i.e. O(N) whereas if prefixSum is used then the time complexity will be constant i.e.O(1) since the answer is calculated by subtracting 2 elements from prefixSum.
